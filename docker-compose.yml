version: "3.8"

services:
  # Main NestJS application
  api:
    build:
      context: .
      target: development
      dockerfile: Dockerfile
    container_name: nestjs-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      - HOST=${HOST}
      - DB_HOST=postgres
      - DB_PORT=${DB_PORT}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - THROTTLE_TTL=${THROTTLE_TTL}
      - THROTTLE_LIMIT=${THROTTLE_LIMIT}
      - LOG_LEVEL=${LOG_LEVEL}
      - LOG_FORMAT=${LOG_FORMAT}
      - APP_NAME=${APP_NAME}
      - APP_VERSION=${APP_VERSION}
      - APP_DESCRIPTION=${APP_DESCRIPTION}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
      - nestjs_logs:/usr/src/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: nestjs-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Adminer for database management
  adminer:
    image: adminer:4.8.1
    container_name: nestjs-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
      - ADMINER_DESIGN=pepa-linha
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - nestjs-network

  # Redis for caching (optional, ready for future use)
  redis:
    image: redis:7-alpine
    container_name: nestjs-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nestjs-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nestjs_logs:
    driver: local

networks:
  nestjs-network:
    driver: bridge
