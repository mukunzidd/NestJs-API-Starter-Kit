name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Linting
  lint:
    name: 🔍 Lint and Format
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint:check

      - name: 💄 Check Prettier formatting
        run: npm run format:check

      - name: 🛡️ Run security audit
        run: npm audit --audit-level moderate

  # Unit Tests
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:cov

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests
          fail_ci_if_error: false

  # Integration Tests
  test-e2e:
    name: 🔄 E2E Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: nestjs_starter_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔄 Run E2E tests
        run: npm run test:e2e:cov
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: test_user
          DB_PASSWORD: test_password
          DB_NAME: nestjs_starter_test
          JWT_SECRET: test-jwt-secret-key-for-testing-purposes

      - name: 📊 Upload E2E coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-e2e/lcov.info
          flags: e2e-tests
          name: e2e-tests
          fail_ci_if_error: false

  # Build Application
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-e2e]

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build application
        run: npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist/
          retention-days: 7

  # Docker Build and Test
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          tags: nestjs-api:dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: 🏗️ Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: nestjs-api:prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: 🔍 Test Docker images
        run: |
          echo "Testing development image..."
          docker run --rm --name test-dev -d -p 3001:3000 nestjs-api:dev
          sleep 10
          docker logs test-dev
          docker stop test-dev

          echo "Testing production image..."
          docker run --rm --name test-prod -d -p 3002:3000 nestjs-api:prod
          sleep 10
          docker logs test-prod
          docker stop test-prod

      - name: 🔐 Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📤 Push Docker images
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deployment (placeholder for production deployment)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

    steps:
      - name: 🚀 Deploy to production
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          # Add your deployment commands here
          # For example: kubectl, docker-compose, or cloud provider CLI commands

  # Notification
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()

    steps:
      - name: 📢 Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
